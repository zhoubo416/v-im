package ${packageName}.controller;

import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletResponse;

import com.ruoyi.common.utils.StringUtils;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.enums.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.ruoyi.common.utils.poi.ExcelUtil;
#if($table.crud || $table.sub)
import com.ruoyi.common.core.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @since ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController<${ClassName}> {
    @Autowired
    private I${ClassName}Service ${className}Service;

/**
 * 查询${functionName}列表
 */
@PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
@GetMapping("/list")

    /**
     * 列表
     * @param ${className} 实体
     * @param pageNum 页码
     * @param pageSize 每页多少条
     */
    #if($table.crud || $table.sub)
    public TableDataInfo list(${ClassName} ${className}, Long pageNum, Long pageSize) {
        QueryWrapper<${ClassName}> queryWrapper = getQueryWrapper(${className});
        IPage<${ClassName}> iPage = ${className}Service.page(new Page<${ClassName}>(pageNum, pageSize), queryWrapper);
        return getDataTable(iPage);
    }
    #elseif($table.tree)
        public AjaxResult list(${ClassName} ${className}) {
            QueryWrapper<${ClassName}> queryWrapper = getQueryWrapper(${className});
            List<${ClassName}> list = ${className}Service.list(queryWrapper);
            return AjaxResult.success(list);
        }
    #end

    /**
     * 导出${functionName}列表
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}" , businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName} ${className}) {
        QueryWrapper<${ClassName}> queryWrapper = getQueryWrapper(${className});
        List<${ClassName}> list = ${className}Service.list(queryWrapper);
        ExcelUtil<${ClassName}> util = new ExcelUtil<>(${ClassName}. class);
        util.exportExcel(response, list, "${functionName}数据");
    }

    /**
     * 获取${functionName}详细信息
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public AjaxResult getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return AjaxResult.success(${className}Service.getById(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}" , businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody ${ClassName} ${className}) {
        return toAjax(${className}Service.save(${className}));
    }

    /**
     * 修改${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}" , businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody ${ClassName} ${className}) {
        return toAjax(${className}Service.updateById(${className}));
    }

    /**
     * 删除${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}" , businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public AjaxResult remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return toAjax(${className}Service.removeBatchByIds(Arrays.asList(${pkColumn.javaField}s)));
    }

    private QueryWrapper<${ClassName}> getQueryWrapper(${ClassName} ${className}) {
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<>();
        #foreach ($column in $columns)
            #if($column.query)
                #set($queryType=$column.queryType)
                #set($javaField=$column.javaField)
                #set($javaType=$column.javaType)
                #set($columnName=$column.columnName)
                #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
            if (#if($javaType == 'String') StringUtils.isNotEmpty(${className}.get${AttrName}()) #elseif($javaType !=
                'String') ${className}.get${AttrName}() != null #end)
                {
                    #if($queryType == "EQ")
                        queryWrapper.eq("$columnName" ,${className}.get${AttrName}());
                    #elseif($queryType == "NE")
                        queryWrapper.ne("$columnName" ,${className}.get${AttrName}());
                    #elseif($queryType == "GT")
                        queryWrapper.gt("$columnName" ,${className}.get${AttrName}());
                    #elseif($queryType == "GTE")
                        queryWrapper.ge("$columnName" ,${className}.get${AttrName}());
                    #elseif($queryType == "LT")
                        queryWrapper.lt("$columnName" ,${className}.get${AttrName}());
                    #elseif($queryType == "LTE")
                        queryWrapper.le("$columnName" ,${className}.get${AttrName}());
                    #elseif($queryType == "LIKE")
                        queryWrapper.like("$columnName" ,${className}.get${AttrName}());
                    #elseif($queryType == "BETWEEN")
                        queryWrapper.between("$columnName" ,${className}.getParams().get("begin$AttrName"),${className}.
                        params.get("end$AttrName"));
                    #end
                }
            #end
        #end
        return queryWrapper;
    }
}
